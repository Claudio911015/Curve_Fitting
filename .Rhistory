a[26]
a[27]
a[26]
a[26, MXN]
install.packages("RQuantLib")
library(RQuantlib)
install.packages("RQuantLib")
Tenor="on"
UCase(Tenor)
toupper(Tenor)
Tenor
substr(Tenor,1,1)
substr(Tenor,0,1)
substr(Tenor,0,2)
substr(Tenor,0,0)
substr(Tenor,2,1)
substr(Tenor,2,2)
Tenor<-"1W"
substr(Tenor,2,2)
substr(Tenor,2,1)
substr(Tenor,0,0)
substr(Tenor,0,1)
substr(Tenor,0,2)
substr(Tenor,2,2)
substr(toupper(Tenor), 1)
substr(toupper(Tenor), 1,1)
substr(toupper(Tenor), 0,2)
substr(toupper(Tenor), 2,2)
date<-'5/5/2017'
str(date)
date<-as.Date(date)
str(date)
date
shiny::runApp()
shiny::runApp()
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE,
repos='http://cran.us.r-project.org')
sapply(pkg, require, character.only = TRUE)
}
packages<-c("quantmod","dplyr","Rblpapi","RMySQL","shiny","foreign","ggplot2","forecast",
"shinyjs","shinydashboard","ggExtra","gridExtra","tidyverse","lubridate",
"reshape2","broom","magrittr","TTR","Hmisc")
ipak(packages)
drv <- dbDriver("MySQL")
user_<-"Claudio"
password_<-"12345678"
dbname_<-"databasefx"
host_<-"150.216.112.128"
con<-dbConnect(drv, user=user_, password=password_, dbname=dbname_, host=host_)
sql1<-paste("SELECT table_name FROM information_schema.tables where table_schema='databasefx';")
rs <- dbSendQuery(con, sql1)
res<-fetch(rs, n=-1)
res
intall.packages(‘tesseract’)
intall.packages("tesseract")
install.packages("tesseract")
linrary(tesseract)
library(tesseract)
text <- ocr("https://jeroen.github.io/images/testocr.png")
text <- ocr("C:/Users/MB50294/Desktop")
\
text <- ocr("C:\Users\MB50294\Desktop")
text <- ocr("C:\\Users\MB50294\Desktop")
text <- ocr("C:\\Users\\MB50294\\Desktop")
text <- ocr("C:\\Users\\MB50294\\Desktop\\testocr.png")
text
text <- ocr("C:\\Users\\MB50294\\Desktop\\Capture.PNG")
text
cat(text)
text <- ocr("C:\\Users\\MB50294\\Desktop\\Capture.PNG")
text
cat(text)
tesseract_download("fra")
french <- tesseract("fra")
french <- tesseract("eng")
english <- tesseract("eng")
text <- ocr("C:\\Users\\MB50294\\Desktop\\Capture.PNG")
cat(text)
text <- ocr("C:\\Users\\MB50294\\Desktop\\Capture.PNG")
cat(text)
text <- ocr("C:\\Users\\MB50294\\Desktop\\Capture.PNG")
cat(text)
text <- ocr("C:\\Users\\MB50294\\Desktop\\Capture.PNG")
cat(text)
text <- ocr("C:\\Users\\MB50294\\Desktop\\Capture.jpg)
text <- ocr("C:\\Users\\MB50294\\Desktop\\Capture.jpg")
cat(text)
list<-list.files("./Volatility Surfaces CSV/Prices")
list
getwd()
setwd("I:\TCRD01\Vol FX")
setwd("I:/TCRD01/Vol FX")
list<-list.files("./Volatility Surfaces CSV/Prices")
list
list<-list.files("./Volatility Surfaces CSV")
list
list<-list.files("./Volatility Surfaces CSV",pattern="*.csv")
list
i<-1
file<-read.csv(paste("./Volatility Surfaces CSV/",list[i],sep=""))
file
file<-read.csv(paste("./Volatility Surfaces CSV/",list[i],sep=""),check.names=FALSE)
file
colnames(file)
colnames(file)[1]
cbind(colnames(file)[1],file)
file
file<-cbind(colnames(file)[1],file)
file
file
file2<-file[,1:10]
file2
file2<-file[,1:8]
file2
file2z-cbind(file2,file2[,5]*file[,9],file2[,6]*file[,9],file2[,7]*file[,10],file2[,8]*file[,10])
file2<-cbind(file2,file2[,5]*file[,9],file2[,6]*file[,9],file2[,7]*file[,10],file2[,8]*file[,10])
file2
colnames(file2)<-NULL
file2
c(file2[,5],file[,9])
cbind(file2[,5],file[,9])
cbind(file2[,6],file[,9])
file2
file
file[,1:10]
file2
apply(file2, 1, paste, collapse="´")
apply(file2, 1, paste, collapse=",´")
apply(file2, 1, paste, collapse="´,´")
file<-read.csv(paste("./Volatility Surfaces CSV/",list[i],sep=""),check.names=FALSE)
file<-cbind(colnames(file)[1],file)
file2<-file[,1:8]
file2<-cbind("(",file2,file2[,5]*file[,9],file2[,6]*file[,9],file2[,7]*file[,10],file2[,8]*file[,10],")")
strings<-apply(file2, 1, paste, collapse="','")
strings
file<-read.csv(paste("./Volatility Surfaces CSV/",list[i],sep=""),check.names=FALSE)
file<-cbind(colnames(file)[1],file)
file2<-file[,1:8]
file2<-cbind("(",file2,file2[,5]*file[,9],file2[,6]*file[,9],file2[,7]*file[,10],file2[,8]*file[,10],system.time(),")")
system.time
now
now()
file<-read.csv(paste("./Volatility Surfaces CSV/",list[i],sep=""),check.names=FALSE)
file<-cbind(colnames(file)[1],file)
file2<-file[,1:8]
file2<-cbind("(",file2,file2[,5]*file[,9],file2[,6]*file[,9],file2[,7]*file[,10],file2[,8]*file[,10],now(),")")
strings<-apply(file2, 1, paste, collapse="','")
strings
gsub("\\(',","\\(",strings)
strings<-gsub("\\(',","\\(",strings)
strings<-gsub("\\,')","\\)",strings)
strings
paste(strings,collapse=",")
request<-paste("INSERT INTO `databasefx`.`broker_quotes`
(`FX`,`Tenor`,`ATM Bid`,`ATM Ask`,`25dRR Bid`,`25dRR Ask`,`25dFly Bid`,`25dFly Ask`,`10dRR Bid`,`10dRR Ask`,`10dFly Bid`,`10dFly Ask`,`Time`)
VALUES",paste(strings,collapse=","))
request
drv <- dbDriver("MySQL")
user_<-"Claudio"
password_<-"12345678"
dbname_<-"databasefx"
host_<-"150.216.112.128"
con<-dbConnect(drv, user=user_, password=password_, dbname=dbname_, host=host_)
rs <- dbSendQuery(con, sql)
sql<-paste("INSERT INTO `databasefx`.`broker_quotes`
(`FX`,`Tenor`,`ATM Bid`,`ATM Ask`,`25dRR Bid`,`25dRR Ask`,`25dFly Bid`,`25dFly Ask`,`10dRR Bid`,`10dRR Ask`,`10dFly Bid`,`10dFly Ask`,`Time`)
VALUES",paste(strings,collapse=","))
rs <- dbSendQuery(con, sql)
library(RMySQL)
setwd("I:/TCRD01/Vol FX")
list<-list.files("./Volatility Surfaces CSV",pattern="*.csv")
drv <- dbDriver("MySQL")
user_<-"Claudio"
password_<-"12345678"
dbname_<-"databasefx"
host_<-"150.216.112.128"
con<-dbConnect(drv, user=user_, password=password_, dbname=dbname_, host=host_)
for(i in 1:length(list))
{
file<-read.csv(paste("./Volatility Surfaces CSV/",list[i],sep=""),check.names=FALSE)
file<-cbind(colnames(file)[1],file)
file2<-file[,1:8]
file2<-cbind("(",file2,file2[,5]*file[,9],file2[,6]*file[,9],file2[,7]*file[,10],file2[,8]*file[,10],now(),")")
strings<-apply(file2, 1, paste, collapse="','")
strings<-gsub("\\(',","\\(",strings)
strings<-gsub("\\,')","\\)",strings)
colnames(file2)<-NULL
sql<-paste("INSERT INTO `databasefx`.`broker_quotes`
(`FX`,`Tenor`,`ATM Bid`,`ATM Ask`,`25dRR Bid`,`25dRR Ask`,`25dFly Bid`,`25dFly Ask`,`10dRR Bid`,`10dRR Ask`,`10dFly Bid`,`10dFly Ask`,`Time`)
VALUES",paste(strings,collapse=","))
rs <- dbSendQuery(con, sql)
}
library(RMySQL)
setwd("I:/TCRD01/Vol FX")
list<-list.files("./Volatility Surfaces CSV",pattern="*.csv")
drv <- dbDriver("MySQL")
user_<-"Claudio"
password_<-"12345678"
dbname_<-"databasefx"
host_<-"150.216.112.128"
con<-dbConnect(drv, user=user_, password=password_, dbname=dbname_, host=host_)
for(i in 1:length(list))
{
file<-read.csv(paste("./Volatility Surfaces CSV/",list[i],sep=""),check.names=FALSE)
file<-cbind(colnames(file)[1],file)
file2<-file[,1:8]
file2<-cbind("(",file2,file2[,5]*file[,9],file2[,6]*file[,9],file2[,7]*file[,10],file2[,8]*file[,10],now(),")")
strings<-apply(file2, 1, paste, collapse="','")
strings<-gsub("\\(',","\\(",strings)
strings<-gsub("\\,')","\\)",strings)
colnames(file2)<-NULL
sql<-paste("INSERT INTO `databasefx`.`broker_quotes`
(`FX`,`Tenor`,`ATM Bid`,`ATM Ask`,`25dRR Bid`,`25dRR Ask`,`25dFly Bid`,`25dFly Ask`,`10dRR Bid`,`10dRR Ask`,`10dFly Bid`,`10dFly Ask`,`Time`)
VALUES",paste(strings,collapse=","))
rs <- dbSendQuery(con, sql)
}
i
files[i]
list[i]
library(RMySQL)
setwd("I:/TCRD01/Vol FX")
list<-list.files("./Volatility Surfaces CSV",pattern="*.csv")
drv <- dbDriver("MySQL")
user_<-"Claudio"
password_<-"12345678"
dbname_<-"databasefx"
host_<-"150.216.112.128"
con<-dbConnect(drv, user=user_, password=password_, dbname=dbname_, host=host_)
list<-list[-3]
for(i in 1:length(list))
{
file<-read.csv(paste("./Volatility Surfaces CSV/",list[i],sep=""),check.names=FALSE)
file<-cbind(colnames(file)[1],file)
file2<-file[,1:8]
file2<-cbind("(",file2,file2[,5]*file[,9],file2[,6]*file[,9],file2[,7]*file[,10],file2[,8]*file[,10],now(),")")
strings<-apply(file2, 1, paste, collapse="','")
strings<-gsub("\\(',","\\(",strings)
strings<-gsub("\\,')","\\)",strings)
colnames(file2)<-NULL
sql<-paste("INSERT INTO `databasefx`.`broker_quotes`
(`FX`,`Tenor`,`ATM Bid`,`ATM Ask`,`25dRR Bid`,`25dRR Ask`,`25dFly Bid`,`25dFly Ask`,`10dRR Bid`,`10dRR Ask`,`10dFly Bid`,`10dFly Ask`,`Time`)
VALUES",paste(strings,collapse=","))
rs <- dbSendQuery(con, sql)
}
i
list[i]
library(RMySQL)
setwd("I:/TCRD01/Vol FX")
list<-list.files("./Volatility Surfaces CSV",pattern="*.csv")
drv <- dbDriver("MySQL")
user_<-"Claudio"
password_<-"12345678"
dbname_<-"databasefx"
host_<-"150.216.112.128"
con<-dbConnect(drv, user=user_, password=password_, dbname=dbname_, host=host_)
list<-list[-3]
list<-list[-9]
for(i in 1:length(list))
{
file<-read.csv(paste("./Volatility Surfaces CSV/",list[i],sep=""),check.names=FALSE)
file<-cbind(colnames(file)[1],file)
file2<-file[,1:8]
file2<-cbind("(",file2,file2[,5]*file[,9],file2[,6]*file[,9],file2[,7]*file[,10],file2[,8]*file[,10],now(),")")
strings<-apply(file2, 1, paste, collapse="','")
strings<-gsub("\\(',","\\(",strings)
strings<-gsub("\\,')","\\)",strings)
colnames(file2)<-NULL
sql<-paste("INSERT INTO `databasefx`.`broker_quotes`
(`FX`,`Tenor`,`ATM Bid`,`ATM Ask`,`25dRR Bid`,`25dRR Ask`,`25dFly Bid`,`25dFly Ask`,`10dRR Bid`,`10dRR Ask`,`10dFly Bid`,`10dFly Ask`,`Time`)
VALUES",paste(strings,collapse=","))
rs <- dbSendQuery(con, sql)
}
runApp('Shiny/FX_project')
runApp('Shiny/FX_project')
runApp('Shiny/FX_project')
runApp('Shiny/FX_project')
runApp('Shiny/FX_project')
drv <- dbDriver("MySQL")
user_<-"Claudio"
password_<-"12345678"
dbname_<-"databasefx"
host_<-"150.216.112.128"
con<-dbConnect(drv, user=user_, password=password_, dbname=dbname_, host=host_)
sql1<-paste("SELECT * FROM databasefx.broker_quotes;")
rs <- dbSendQuery(con, sql1)
res<-fetch(rs, n=-1)
res
sql1<-paste("SELECT FX FROM databasefx.broker_quotes;")
rs <- dbSendQuery(con, sql1)
res<-fetch(rs, n=-1)
res
unique(res)
unique(res)[,]
runApp('Shiny/FX_project')
sql1<-paste("SELECT * FROM databasefx.broker_quotes
where FX=",input$instruments_broker, "and Tenor='1d';",
sep="")
sql1<-paste("SELECT * FROM databasefx.broker_quotes
where FX=","input$instruments_broker", "and Tenor='1d';",
sep="")
sql1
runApp('Shiny/FX_project')
runApp('Shiny/FX_project')
runApp('Shiny/FX_project')
shiny::runApp()
runApp()
head(x)
coredata(x)
as.character(coredata(x))
as.number(coredata(x))
plot(coredata(x))
plot(x)
str(x)
mean(x)
as.double(x)
as.double(coredata(x)
)
ggplot(as.double(coredata(x)))
plot(as.double(coredata(x)))
runApp()
runApp()
runApp()
head(res)
head(res)
xts(as.double(res[,2]),order.by=as.Date(res[,1],format='%d/%b/%Y:%H:%M:%S'))
as.Date(res[,1],format='%d/%b/%Y:%H:%M:%S')
as.Date(res[,1])
as.Date(res[,1],format='%d/%b/%Y)
)
=
))
runApp()
as.Date(res[,1],format='%d/%b/%Y:%H:%M:%S')
as.Date(res[,1],format='%d/%b/%Y')
as.Date(res[,1],format='%d/%m/%Y')
as.Date(res[,1],format='%d%b%Y')
as.Date(res[,1],format='%d%b%Y')
res[,1]
format(as.Date(res[,1]),"%d/%m/%y %H:%M:%OS")
as.Date(res[,1],"%d/%m/%y %H:%M:%OS")
as.POSIXct(res[,1], format="%Y%m%d %H:%M:%S")
sql1<-paste("Select * from databasefx.broker_quotes WHERE FX='",
input$instrumentos_broker,"' AND Tenor='",input$tenors_broker,"'",sep="")
rs <- dbSendQuery(con, sql1)
library(shiny)
library(shinydashboard)
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE,
repos='http://cran.us.r-project.org')
sapply(pkg, require, character.only = TRUE)
}
packages<-c("quantmod","dplyr","Rblpapi","RMySQL","shiny","foreign","ggplot2","forecast",
"shinyjs","shinydashboard","ggExtra","gridExtra","tidyverse","lubridate",
"reshape2","broom","magrittr","TTR","Hmisc")
ipak(packages)
drv <- dbDriver("MySQL")
user_<-"Claudio"
password_<-"12345678"
dbname_<-"databasefx"
host_<-"150.216.112.128"
con<-dbConnect(drv, user=user_, password=password_, dbname=dbname_, host=host_)
sql1<-paste("Select * from databasefx.broker_quotes WHERE FX='",
input$instrumentos_broker,"' AND Tenor='",input$tenors_broker,"'",sep="")
runApp()
res
strptime(res[,1],format='%d/%m/%Y:%H:%M:%0S')
res[,1]
strptime(res[,1],format='%Y-%m-%d %H:%M:%0S')
strptime(res[,1], "%Y-%m-%d %H:%M:%S", tz = "EST5EDT")
strptime(res[,1], "%Y-%m-%d %H:%M:%S")
runApp()
x
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
library(Rblpapi)
intraday<-bdh("USDMXN Curncy","Open","2018-02-10 09:00:00","2018-02-14 12:00:00","Dir=V","BarTp","Trade","BarSz=1","Dts=S")
intraday<-bdh("USDMXN Curncy","Open",start.date=Sys.Date()-3,"2018-02-14 12:00:00","Dir=V","BarTp","Trade","BarSz=1","Dts=S")
?bdh
intraday<-bdh("USDMXN Curncy","Open",start.date=Sys.Date()-3,end.date=Sys.Date(),"Dir=V","BarTp","Trade","BarSz=1","Dts=S")
intraday<-bdh("USDMXN Curncy","Open",start.date=Sys.Date()-3,end.date=Sys.Date(),options="Dir=V","BarTp","Trade","BarSz=1","Dts=S")
intraday<-bdh("USDMXN Curncy","Open",start.date=Sys.Date()-3,end.date=Sys.Date())
blpConnect(\)
blpConnect()
intraday<-bdh("USDMXN Curncy","Open",start.date=Sys.Date()-3,end.date=Sys.Date())
intraday
intraday<-bdh("USDMXN Curncy","Open",start.date=Sys.Date()-3,end.date=Sys.Date(),options="Dir=V")
intraday<-bdh("USDMXN Curncy","Open",start.date=Sys.Date()-3,end.date=Sys.Date(),options="Dir=V")
opt<-c("BarTp","Trade","BarSz=1","Dts=S")
intraday<-bdh("USDMXN Curncy","Open",start.date=Sys.Date()-3,end.date=Sys.Date(),options=opt)
opt<-c("BarSz=1","Dts=S")
intraday<-bdh("USDMXN Curncy","Open",start.date=Sys.Date()-3,end.date=Sys.Date(),options=opt)
opt<-c("Dts=S")
intraday<-bdh("USDMXN Curncy","Open",start.date=Sys.Date()-3,end.date=Sys.Date(),options=opt)
opt<-c("Dir=V")
intraday<-bdh("USDMXN Curncy","Open",start.date=Sys.Date()-3,end.date=Sys.Date(),options=opt)
opt<-c("Dir"="V")
intraday<-bdh("USDMXN Curncy","Open",start.date=Sys.Date()-3,end.date=Sys.Date(),options=opt)
intraday<-bdh("USDMXN Curncy","Open",start.date=Sys.Date()-3,end.date=Sys.Date(),options=opt)
opt<-c("BarTp")
intraday<-bdh("USDMXN Curncy","Open",start.date=Sys.Date()-3,end.date=Sys.Date(),options=opt)
getBars("ES1 Index"
)
getBars("ES1 Index")
getBars("Usdmxn Curncy")
getBars("USDMXN Curncy")
intraday<-getBars("USDMXN Curncy",barInterval = 60,startTime = Sys.time() - 60 * 60 * 6, endTime = Sys.time())
intraday
intraday<-getBars("USDMXN Curncy",barInterval = 1,startTime = Sys.time() - 60 * 60 * 6, endTime = Sys.time())
intraday
intraday
des(intraday)
head(intraday)
runApp()
runApp()
shiny::runApp()
intraday<-getBars("USDMXN Curncy",barInterval = 60,startTime = Sys.time() - 60 * 60 * 6, endTime = Sys.time())
intraday
intraday<-getBars("USDMXN Curncy",barInterval = 1,startTime = Sys.time() - 60 * 60 * 6, endTime = Sys.time())
intraday
library(shiny); runApp('run.R')
runApp('run.R')
runApp('run.R')
intraday<-getBars("USDMXN Curncy",barInterval = 60,startTime = Sys.time() - 60 * 60 * 6, endTime = Sys.time())
intraday
intraday<-getBars("USDMXN Curncy",barInterval = 1,startTime = Sys.time() - 60 * 60 * 6, endTime = Sys.time())
intraday
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp()
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp()
runApp('run.R')
runApp('run.R')
shiny::runApp()
DF = data.frame(val = 1:10, bool = TRUE, big = LETTERS[1:10],
small = letters[1:10],
dt = seq(from = Sys.Date(), by = "days", length.out = 10),
stringsAsFactors = FALSE)
DF$chart = c(sapply(1:5,
function(x) jsonlite::toJSON(list(values=rnorm(10),
options = list(type = "bar")))),
sapply(1:5,
function(x) jsonlite::toJSON(list(values=rnorm(10),
options = list(type = "line")))))
rhandsontable(DF, rowHeaders = NULL, width = 550, height = 300) %>%
hot_col("chart", renderer = htmlwidgets::JS("renderSparkline"))
install.packages("rhandsontable")
DF = data.frame(val = 1:10, bool = TRUE, big = LETTERS[1:10],
small = letters[1:10],
dt = seq(from = Sys.Date(), by = "days", length.out = 10),
stringsAsFactors = FALSE)
DF$chart = c(sapply(1:5,
function(x) jsonlite::toJSON(list(values=rnorm(10),
options = list(type = "bar")))),
sapply(1:5,
function(x) jsonlite::toJSON(list(values=rnorm(10),
options = list(type = "line")))))
rhandsontable(DF, rowHeaders = NULL, width = 550, height = 300) %>%
hot_col("chart", renderer = htmlwidgets::JS("renderSparkline"))
library(rhandsontable)
DF = data.frame(val = 1:10, bool = TRUE, big = LETTERS[1:10],
small = letters[1:10],
dt = seq(from = Sys.Date(), by = "days", length.out = 10),
stringsAsFactors = FALSE)
DF$chart = c(sapply(1:5,
function(x) jsonlite::toJSON(list(values=rnorm(10),
options = list(type = "bar")))),
sapply(1:5,
function(x) jsonlite::toJSON(list(values=rnorm(10),
options = list(type = "line")))))
rhandsontable(DF, rowHeaders = NULL, width = 550, height = 300) %>%
hot_col("chart", renderer = htmlwidgets::JS("renderSparkline"))
runApp()
view<-view %>%
subset(select=-c(RESET_FREQUENCY_1,RESET_FREQUENCY_2,PAYMENT_FREQUENCY_1,PAYMENT_FREQUENCY_2,
INDICATION_OF_END_USER_EXCEPTION,DAY_COUNT_CONVENTION,SETTLEMENT_CURRENCY,
`SUB-ASSET_CLASS_FOR_OTHER_COMMODITY`,UNDERLYING_ASSET_1,UNDERLYING_ASSET_2,
PRICE_NOTATION3,PRICE_NOTATION2,PRICE_NOTATION2_TYPE,PRICE_NOTATION3_TYPE))
library(dataonderivatives)
library("lubridate")
view<-ddr(Sys.Date()-1, "FX")
view<-view %>%
subset(select=-c(RESET_FREQUENCY_1,RESET_FREQUENCY_2,PAYMENT_FREQUENCY_1,PAYMENT_FREQUENCY_2,
INDICATION_OF_END_USER_EXCEPTION,DAY_COUNT_CONVENTION,SETTLEMENT_CURRENCY,
`SUB-ASSET_CLASS_FOR_OTHER_COMMODITY`,UNDERLYING_ASSET_1,UNDERLYING_ASSET_2,
PRICE_NOTATION3,PRICE_NOTATION2,PRICE_NOTATION2_TYPE,PRICE_NOTATION3_TYPE))
view<-view %>%
filter(TAXONOMY == "ForeignExchange:VanillaOption" & (
(NOTIONAL_CURRENCY_1=="USD" & NOTIONAL_CURRENCY_2=="MXN") |
(NOTIONAL_CURRENCY_2=="USD" & NOTIONAL_CURRENCY_1=="MXN")))
view
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
library(shiny); runApp('run.R')
runApp('run.R')
runApp('run.R')
